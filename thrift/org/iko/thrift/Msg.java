/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.iko.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Msg implements org.apache.thrift.TBase<Msg, Msg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Msg");

  private static final org.apache.thrift.protocol.TField MID_FIELD_DESC = new org.apache.thrift.protocol.TField("mid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MSGTEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("msgtext", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PUSHLISH_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("pushlishTime", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField TAG_FIELD_DESC = new org.apache.thrift.protocol.TField("tag", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField IP_FIELD_DESC = new org.apache.thrift.protocol.TField("ip", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField DEVICE_FIELD_DESC = new org.apache.thrift.protocol.TField("device", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField AT_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("atIds", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField ATTACHMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("attachments", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField SHORTURL_FIELD_DESC = new org.apache.thrift.protocol.TField("shorturl", org.apache.thrift.protocol.TType.LIST, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MsgTupleSchemeFactory());
  }

  public String mid; // required
  public String msgtext; // required
  public String uid; // required
  public String pushlishTime; // required
  /**
   * 
   * @see MsgType
   */
  public MsgType type; // required
  /**
   * 
   * @see MsgTag
   */
  public MsgTag tag; // required
  public String ip; // required
  public String device; // required
  public List<String> atIds; // required
  public List<Attach> attachments; // required
  public List<ShortURL> shorturl; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MID((short)1, "mid"),
    MSGTEXT((short)2, "msgtext"),
    UID((short)3, "uid"),
    PUSHLISH_TIME((short)5, "pushlishTime"),
    /**
     * 
     * @see MsgType
     */
    TYPE((short)6, "type"),
    /**
     * 
     * @see MsgTag
     */
    TAG((short)7, "tag"),
    IP((short)8, "ip"),
    DEVICE((short)9, "device"),
    AT_IDS((short)10, "atIds"),
    ATTACHMENTS((short)11, "attachments"),
    SHORTURL((short)12, "shorturl");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MID
          return MID;
        case 2: // MSGTEXT
          return MSGTEXT;
        case 3: // UID
          return UID;
        case 5: // PUSHLISH_TIME
          return PUSHLISH_TIME;
        case 6: // TYPE
          return TYPE;
        case 7: // TAG
          return TAG;
        case 8: // IP
          return IP;
        case 9: // DEVICE
          return DEVICE;
        case 10: // AT_IDS
          return AT_IDS;
        case 11: // ATTACHMENTS
          return ATTACHMENTS;
        case 12: // SHORTURL
          return SHORTURL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MID, new org.apache.thrift.meta_data.FieldMetaData("mid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MSGTEXT, new org.apache.thrift.meta_data.FieldMetaData("msgtext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PUSHLISH_TIME, new org.apache.thrift.meta_data.FieldMetaData("pushlishTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MsgType.class)));
    tmpMap.put(_Fields.TAG, new org.apache.thrift.meta_data.FieldMetaData("tag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MsgTag.class)));
    tmpMap.put(_Fields.IP, new org.apache.thrift.meta_data.FieldMetaData("ip", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEVICE, new org.apache.thrift.meta_data.FieldMetaData("device", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AT_IDS, new org.apache.thrift.meta_data.FieldMetaData("atIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.ATTACHMENTS, new org.apache.thrift.meta_data.FieldMetaData("attachments", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Attach.class))));
    tmpMap.put(_Fields.SHORTURL, new org.apache.thrift.meta_data.FieldMetaData("shorturl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ShortURL.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Msg.class, metaDataMap);
  }

  public Msg() {
  }

  public Msg(
    String mid,
    String msgtext,
    String uid,
    String pushlishTime,
    MsgType type,
    MsgTag tag,
    String ip,
    String device,
    List<String> atIds,
    List<Attach> attachments,
    List<ShortURL> shorturl)
  {
    this();
    this.mid = mid;
    this.msgtext = msgtext;
    this.uid = uid;
    this.pushlishTime = pushlishTime;
    this.type = type;
    this.tag = tag;
    this.ip = ip;
    this.device = device;
    this.atIds = atIds;
    this.attachments = attachments;
    this.shorturl = shorturl;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Msg(Msg other) {
    if (other.isSetMid()) {
      this.mid = other.mid;
    }
    if (other.isSetMsgtext()) {
      this.msgtext = other.msgtext;
    }
    if (other.isSetUid()) {
      this.uid = other.uid;
    }
    if (other.isSetPushlishTime()) {
      this.pushlishTime = other.pushlishTime;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetTag()) {
      this.tag = other.tag;
    }
    if (other.isSetIp()) {
      this.ip = other.ip;
    }
    if (other.isSetDevice()) {
      this.device = other.device;
    }
    if (other.isSetAtIds()) {
      List<String> __this__atIds = new ArrayList<String>();
      for (String other_element : other.atIds) {
        __this__atIds.add(other_element);
      }
      this.atIds = __this__atIds;
    }
    if (other.isSetAttachments()) {
      List<Attach> __this__attachments = new ArrayList<Attach>();
      for (Attach other_element : other.attachments) {
        __this__attachments.add(new Attach(other_element));
      }
      this.attachments = __this__attachments;
    }
    if (other.isSetShorturl()) {
      List<ShortURL> __this__shorturl = new ArrayList<ShortURL>();
      for (ShortURL other_element : other.shorturl) {
        __this__shorturl.add(new ShortURL(other_element));
      }
      this.shorturl = __this__shorturl;
    }
  }

  public Msg deepCopy() {
    return new Msg(this);
  }

  @Override
  public void clear() {
    this.mid = null;
    this.msgtext = null;
    this.uid = null;
    this.pushlishTime = null;
    this.type = null;
    this.tag = null;
    this.ip = null;
    this.device = null;
    this.atIds = null;
    this.attachments = null;
    this.shorturl = null;
  }

  public String getMid() {
    return this.mid;
  }

  public Msg setMid(String mid) {
    this.mid = mid;
    return this;
  }

  public void unsetMid() {
    this.mid = null;
  }

  /** Returns true if field mid is set (has been assigned a value) and false otherwise */
  public boolean isSetMid() {
    return this.mid != null;
  }

  public void setMidIsSet(boolean value) {
    if (!value) {
      this.mid = null;
    }
  }

  public String getMsgtext() {
    return this.msgtext;
  }

  public Msg setMsgtext(String msgtext) {
    this.msgtext = msgtext;
    return this;
  }

  public void unsetMsgtext() {
    this.msgtext = null;
  }

  /** Returns true if field msgtext is set (has been assigned a value) and false otherwise */
  public boolean isSetMsgtext() {
    return this.msgtext != null;
  }

  public void setMsgtextIsSet(boolean value) {
    if (!value) {
      this.msgtext = null;
    }
  }

  public String getUid() {
    return this.uid;
  }

  public Msg setUid(String uid) {
    this.uid = uid;
    return this;
  }

  public void unsetUid() {
    this.uid = null;
  }

  /** Returns true if field uid is set (has been assigned a value) and false otherwise */
  public boolean isSetUid() {
    return this.uid != null;
  }

  public void setUidIsSet(boolean value) {
    if (!value) {
      this.uid = null;
    }
  }

  public String getPushlishTime() {
    return this.pushlishTime;
  }

  public Msg setPushlishTime(String pushlishTime) {
    this.pushlishTime = pushlishTime;
    return this;
  }

  public void unsetPushlishTime() {
    this.pushlishTime = null;
  }

  /** Returns true if field pushlishTime is set (has been assigned a value) and false otherwise */
  public boolean isSetPushlishTime() {
    return this.pushlishTime != null;
  }

  public void setPushlishTimeIsSet(boolean value) {
    if (!value) {
      this.pushlishTime = null;
    }
  }

  /**
   * 
   * @see MsgType
   */
  public MsgType getType() {
    return this.type;
  }

  /**
   * 
   * @see MsgType
   */
  public Msg setType(MsgType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  /**
   * 
   * @see MsgTag
   */
  public MsgTag getTag() {
    return this.tag;
  }

  /**
   * 
   * @see MsgTag
   */
  public Msg setTag(MsgTag tag) {
    this.tag = tag;
    return this;
  }

  public void unsetTag() {
    this.tag = null;
  }

  /** Returns true if field tag is set (has been assigned a value) and false otherwise */
  public boolean isSetTag() {
    return this.tag != null;
  }

  public void setTagIsSet(boolean value) {
    if (!value) {
      this.tag = null;
    }
  }

  public String getIp() {
    return this.ip;
  }

  public Msg setIp(String ip) {
    this.ip = ip;
    return this;
  }

  public void unsetIp() {
    this.ip = null;
  }

  /** Returns true if field ip is set (has been assigned a value) and false otherwise */
  public boolean isSetIp() {
    return this.ip != null;
  }

  public void setIpIsSet(boolean value) {
    if (!value) {
      this.ip = null;
    }
  }

  public String getDevice() {
    return this.device;
  }

  public Msg setDevice(String device) {
    this.device = device;
    return this;
  }

  public void unsetDevice() {
    this.device = null;
  }

  /** Returns true if field device is set (has been assigned a value) and false otherwise */
  public boolean isSetDevice() {
    return this.device != null;
  }

  public void setDeviceIsSet(boolean value) {
    if (!value) {
      this.device = null;
    }
  }

  public int getAtIdsSize() {
    return (this.atIds == null) ? 0 : this.atIds.size();
  }

  public java.util.Iterator<String> getAtIdsIterator() {
    return (this.atIds == null) ? null : this.atIds.iterator();
  }

  public void addToAtIds(String elem) {
    if (this.atIds == null) {
      this.atIds = new ArrayList<String>();
    }
    this.atIds.add(elem);
  }

  public List<String> getAtIds() {
    return this.atIds;
  }

  public Msg setAtIds(List<String> atIds) {
    this.atIds = atIds;
    return this;
  }

  public void unsetAtIds() {
    this.atIds = null;
  }

  /** Returns true if field atIds is set (has been assigned a value) and false otherwise */
  public boolean isSetAtIds() {
    return this.atIds != null;
  }

  public void setAtIdsIsSet(boolean value) {
    if (!value) {
      this.atIds = null;
    }
  }

  public int getAttachmentsSize() {
    return (this.attachments == null) ? 0 : this.attachments.size();
  }

  public java.util.Iterator<Attach> getAttachmentsIterator() {
    return (this.attachments == null) ? null : this.attachments.iterator();
  }

  public void addToAttachments(Attach elem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<Attach>();
    }
    this.attachments.add(elem);
  }

  public List<Attach> getAttachments() {
    return this.attachments;
  }

  public Msg setAttachments(List<Attach> attachments) {
    this.attachments = attachments;
    return this;
  }

  public void unsetAttachments() {
    this.attachments = null;
  }

  /** Returns true if field attachments is set (has been assigned a value) and false otherwise */
  public boolean isSetAttachments() {
    return this.attachments != null;
  }

  public void setAttachmentsIsSet(boolean value) {
    if (!value) {
      this.attachments = null;
    }
  }

  public int getShorturlSize() {
    return (this.shorturl == null) ? 0 : this.shorturl.size();
  }

  public java.util.Iterator<ShortURL> getShorturlIterator() {
    return (this.shorturl == null) ? null : this.shorturl.iterator();
  }

  public void addToShorturl(ShortURL elem) {
    if (this.shorturl == null) {
      this.shorturl = new ArrayList<ShortURL>();
    }
    this.shorturl.add(elem);
  }

  public List<ShortURL> getShorturl() {
    return this.shorturl;
  }

  public Msg setShorturl(List<ShortURL> shorturl) {
    this.shorturl = shorturl;
    return this;
  }

  public void unsetShorturl() {
    this.shorturl = null;
  }

  /** Returns true if field shorturl is set (has been assigned a value) and false otherwise */
  public boolean isSetShorturl() {
    return this.shorturl != null;
  }

  public void setShorturlIsSet(boolean value) {
    if (!value) {
      this.shorturl = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MID:
      if (value == null) {
        unsetMid();
      } else {
        setMid((String)value);
      }
      break;

    case MSGTEXT:
      if (value == null) {
        unsetMsgtext();
      } else {
        setMsgtext((String)value);
      }
      break;

    case UID:
      if (value == null) {
        unsetUid();
      } else {
        setUid((String)value);
      }
      break;

    case PUSHLISH_TIME:
      if (value == null) {
        unsetPushlishTime();
      } else {
        setPushlishTime((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((MsgType)value);
      }
      break;

    case TAG:
      if (value == null) {
        unsetTag();
      } else {
        setTag((MsgTag)value);
      }
      break;

    case IP:
      if (value == null) {
        unsetIp();
      } else {
        setIp((String)value);
      }
      break;

    case DEVICE:
      if (value == null) {
        unsetDevice();
      } else {
        setDevice((String)value);
      }
      break;

    case AT_IDS:
      if (value == null) {
        unsetAtIds();
      } else {
        setAtIds((List<String>)value);
      }
      break;

    case ATTACHMENTS:
      if (value == null) {
        unsetAttachments();
      } else {
        setAttachments((List<Attach>)value);
      }
      break;

    case SHORTURL:
      if (value == null) {
        unsetShorturl();
      } else {
        setShorturl((List<ShortURL>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MID:
      return getMid();

    case MSGTEXT:
      return getMsgtext();

    case UID:
      return getUid();

    case PUSHLISH_TIME:
      return getPushlishTime();

    case TYPE:
      return getType();

    case TAG:
      return getTag();

    case IP:
      return getIp();

    case DEVICE:
      return getDevice();

    case AT_IDS:
      return getAtIds();

    case ATTACHMENTS:
      return getAttachments();

    case SHORTURL:
      return getShorturl();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MID:
      return isSetMid();
    case MSGTEXT:
      return isSetMsgtext();
    case UID:
      return isSetUid();
    case PUSHLISH_TIME:
      return isSetPushlishTime();
    case TYPE:
      return isSetType();
    case TAG:
      return isSetTag();
    case IP:
      return isSetIp();
    case DEVICE:
      return isSetDevice();
    case AT_IDS:
      return isSetAtIds();
    case ATTACHMENTS:
      return isSetAttachments();
    case SHORTURL:
      return isSetShorturl();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Msg)
      return this.equals((Msg)that);
    return false;
  }

  public boolean equals(Msg that) {
    if (that == null)
      return false;

    boolean this_present_mid = true && this.isSetMid();
    boolean that_present_mid = true && that.isSetMid();
    if (this_present_mid || that_present_mid) {
      if (!(this_present_mid && that_present_mid))
        return false;
      if (!this.mid.equals(that.mid))
        return false;
    }

    boolean this_present_msgtext = true && this.isSetMsgtext();
    boolean that_present_msgtext = true && that.isSetMsgtext();
    if (this_present_msgtext || that_present_msgtext) {
      if (!(this_present_msgtext && that_present_msgtext))
        return false;
      if (!this.msgtext.equals(that.msgtext))
        return false;
    }

    boolean this_present_uid = true && this.isSetUid();
    boolean that_present_uid = true && that.isSetUid();
    if (this_present_uid || that_present_uid) {
      if (!(this_present_uid && that_present_uid))
        return false;
      if (!this.uid.equals(that.uid))
        return false;
    }

    boolean this_present_pushlishTime = true && this.isSetPushlishTime();
    boolean that_present_pushlishTime = true && that.isSetPushlishTime();
    if (this_present_pushlishTime || that_present_pushlishTime) {
      if (!(this_present_pushlishTime && that_present_pushlishTime))
        return false;
      if (!this.pushlishTime.equals(that.pushlishTime))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_tag = true && this.isSetTag();
    boolean that_present_tag = true && that.isSetTag();
    if (this_present_tag || that_present_tag) {
      if (!(this_present_tag && that_present_tag))
        return false;
      if (!this.tag.equals(that.tag))
        return false;
    }

    boolean this_present_ip = true && this.isSetIp();
    boolean that_present_ip = true && that.isSetIp();
    if (this_present_ip || that_present_ip) {
      if (!(this_present_ip && that_present_ip))
        return false;
      if (!this.ip.equals(that.ip))
        return false;
    }

    boolean this_present_device = true && this.isSetDevice();
    boolean that_present_device = true && that.isSetDevice();
    if (this_present_device || that_present_device) {
      if (!(this_present_device && that_present_device))
        return false;
      if (!this.device.equals(that.device))
        return false;
    }

    boolean this_present_atIds = true && this.isSetAtIds();
    boolean that_present_atIds = true && that.isSetAtIds();
    if (this_present_atIds || that_present_atIds) {
      if (!(this_present_atIds && that_present_atIds))
        return false;
      if (!this.atIds.equals(that.atIds))
        return false;
    }

    boolean this_present_attachments = true && this.isSetAttachments();
    boolean that_present_attachments = true && that.isSetAttachments();
    if (this_present_attachments || that_present_attachments) {
      if (!(this_present_attachments && that_present_attachments))
        return false;
      if (!this.attachments.equals(that.attachments))
        return false;
    }

    boolean this_present_shorturl = true && this.isSetShorturl();
    boolean that_present_shorturl = true && that.isSetShorturl();
    if (this_present_shorturl || that_present_shorturl) {
      if (!(this_present_shorturl && that_present_shorturl))
        return false;
      if (!this.shorturl.equals(that.shorturl))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Msg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Msg typedOther = (Msg)other;

    lastComparison = Boolean.valueOf(isSetMid()).compareTo(typedOther.isSetMid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mid, typedOther.mid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMsgtext()).compareTo(typedOther.isSetMsgtext());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMsgtext()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msgtext, typedOther.msgtext);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPushlishTime()).compareTo(typedOther.isSetPushlishTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPushlishTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pushlishTime, typedOther.pushlishTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, typedOther.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTag()).compareTo(typedOther.isSetTag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tag, typedOther.tag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIp()).compareTo(typedOther.isSetIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip, typedOther.ip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDevice()).compareTo(typedOther.isSetDevice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDevice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.device, typedOther.device);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAtIds()).compareTo(typedOther.isSetAtIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAtIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.atIds, typedOther.atIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAttachments()).compareTo(typedOther.isSetAttachments());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttachments()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attachments, typedOther.attachments);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShorturl()).compareTo(typedOther.isSetShorturl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShorturl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shorturl, typedOther.shorturl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Msg(");
    boolean first = true;

    sb.append("mid:");
    if (this.mid == null) {
      sb.append("null");
    } else {
      sb.append(this.mid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("msgtext:");
    if (this.msgtext == null) {
      sb.append("null");
    } else {
      sb.append(this.msgtext);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("uid:");
    if (this.uid == null) {
      sb.append("null");
    } else {
      sb.append(this.uid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pushlishTime:");
    if (this.pushlishTime == null) {
      sb.append("null");
    } else {
      sb.append(this.pushlishTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tag:");
    if (this.tag == null) {
      sb.append("null");
    } else {
      sb.append(this.tag);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ip:");
    if (this.ip == null) {
      sb.append("null");
    } else {
      sb.append(this.ip);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("device:");
    if (this.device == null) {
      sb.append("null");
    } else {
      sb.append(this.device);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("atIds:");
    if (this.atIds == null) {
      sb.append("null");
    } else {
      sb.append(this.atIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("attachments:");
    if (this.attachments == null) {
      sb.append("null");
    } else {
      sb.append(this.attachments);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("shorturl:");
    if (this.shorturl == null) {
      sb.append("null");
    } else {
      sb.append(this.shorturl);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MsgStandardSchemeFactory implements SchemeFactory {
    public MsgStandardScheme getScheme() {
      return new MsgStandardScheme();
    }
  }

  private static class MsgStandardScheme extends StandardScheme<Msg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Msg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mid = iprot.readString();
              struct.setMidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MSGTEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.msgtext = iprot.readString();
              struct.setMsgtextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // UID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uid = iprot.readString();
              struct.setUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PUSHLISH_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pushlishTime = iprot.readString();
              struct.setPushlishTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = MsgType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TAG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tag = MsgTag.findByValue(iprot.readI32());
              struct.setTagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ip = iprot.readString();
              struct.setIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DEVICE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.device = iprot.readString();
              struct.setDeviceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // AT_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.atIds = new ArrayList<String>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  String _elem2; // required
                  _elem2 = iprot.readString();
                  struct.atIds.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setAtIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ATTACHMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.attachments = new ArrayList<Attach>(_list3.size);
                for (int _i4 = 0; _i4 < _list3.size; ++_i4)
                {
                  Attach _elem5; // required
                  _elem5 = new Attach();
                  _elem5.read(iprot);
                  struct.attachments.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setAttachmentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SHORTURL
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.shorturl = new ArrayList<ShortURL>(_list6.size);
                for (int _i7 = 0; _i7 < _list6.size; ++_i7)
                {
                  ShortURL _elem8; // required
                  _elem8 = new ShortURL();
                  _elem8.read(iprot);
                  struct.shorturl.add(_elem8);
                }
                iprot.readListEnd();
              }
              struct.setShorturlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Msg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.mid != null) {
        oprot.writeFieldBegin(MID_FIELD_DESC);
        oprot.writeString(struct.mid);
        oprot.writeFieldEnd();
      }
      if (struct.msgtext != null) {
        oprot.writeFieldBegin(MSGTEXT_FIELD_DESC);
        oprot.writeString(struct.msgtext);
        oprot.writeFieldEnd();
      }
      if (struct.uid != null) {
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeString(struct.uid);
        oprot.writeFieldEnd();
      }
      if (struct.pushlishTime != null) {
        oprot.writeFieldBegin(PUSHLISH_TIME_FIELD_DESC);
        oprot.writeString(struct.pushlishTime);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.tag != null) {
        oprot.writeFieldBegin(TAG_FIELD_DESC);
        oprot.writeI32(struct.tag.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.ip != null) {
        oprot.writeFieldBegin(IP_FIELD_DESC);
        oprot.writeString(struct.ip);
        oprot.writeFieldEnd();
      }
      if (struct.device != null) {
        oprot.writeFieldBegin(DEVICE_FIELD_DESC);
        oprot.writeString(struct.device);
        oprot.writeFieldEnd();
      }
      if (struct.atIds != null) {
        oprot.writeFieldBegin(AT_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.atIds.size()));
          for (String _iter9 : struct.atIds)
          {
            oprot.writeString(_iter9);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.attachments != null) {
        oprot.writeFieldBegin(ATTACHMENTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.attachments.size()));
          for (Attach _iter10 : struct.attachments)
          {
            _iter10.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.shorturl != null) {
        oprot.writeFieldBegin(SHORTURL_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.shorturl.size()));
          for (ShortURL _iter11 : struct.shorturl)
          {
            _iter11.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MsgTupleSchemeFactory implements SchemeFactory {
    public MsgTupleScheme getScheme() {
      return new MsgTupleScheme();
    }
  }

  private static class MsgTupleScheme extends TupleScheme<Msg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Msg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMid()) {
        optionals.set(0);
      }
      if (struct.isSetMsgtext()) {
        optionals.set(1);
      }
      if (struct.isSetUid()) {
        optionals.set(2);
      }
      if (struct.isSetPushlishTime()) {
        optionals.set(3);
      }
      if (struct.isSetType()) {
        optionals.set(4);
      }
      if (struct.isSetTag()) {
        optionals.set(5);
      }
      if (struct.isSetIp()) {
        optionals.set(6);
      }
      if (struct.isSetDevice()) {
        optionals.set(7);
      }
      if (struct.isSetAtIds()) {
        optionals.set(8);
      }
      if (struct.isSetAttachments()) {
        optionals.set(9);
      }
      if (struct.isSetShorturl()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetMid()) {
        oprot.writeString(struct.mid);
      }
      if (struct.isSetMsgtext()) {
        oprot.writeString(struct.msgtext);
      }
      if (struct.isSetUid()) {
        oprot.writeString(struct.uid);
      }
      if (struct.isSetPushlishTime()) {
        oprot.writeString(struct.pushlishTime);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetTag()) {
        oprot.writeI32(struct.tag.getValue());
      }
      if (struct.isSetIp()) {
        oprot.writeString(struct.ip);
      }
      if (struct.isSetDevice()) {
        oprot.writeString(struct.device);
      }
      if (struct.isSetAtIds()) {
        {
          oprot.writeI32(struct.atIds.size());
          for (String _iter12 : struct.atIds)
          {
            oprot.writeString(_iter12);
          }
        }
      }
      if (struct.isSetAttachments()) {
        {
          oprot.writeI32(struct.attachments.size());
          for (Attach _iter13 : struct.attachments)
          {
            _iter13.write(oprot);
          }
        }
      }
      if (struct.isSetShorturl()) {
        {
          oprot.writeI32(struct.shorturl.size());
          for (ShortURL _iter14 : struct.shorturl)
          {
            _iter14.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Msg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.mid = iprot.readString();
        struct.setMidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.msgtext = iprot.readString();
        struct.setMsgtextIsSet(true);
      }
      if (incoming.get(2)) {
        struct.uid = iprot.readString();
        struct.setUidIsSet(true);
      }
      if (incoming.get(3)) {
        struct.pushlishTime = iprot.readString();
        struct.setPushlishTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.type = MsgType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.tag = MsgTag.findByValue(iprot.readI32());
        struct.setTagIsSet(true);
      }
      if (incoming.get(6)) {
        struct.ip = iprot.readString();
        struct.setIpIsSet(true);
      }
      if (incoming.get(7)) {
        struct.device = iprot.readString();
        struct.setDeviceIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.atIds = new ArrayList<String>(_list15.size);
          for (int _i16 = 0; _i16 < _list15.size; ++_i16)
          {
            String _elem17; // required
            _elem17 = iprot.readString();
            struct.atIds.add(_elem17);
          }
        }
        struct.setAtIdsIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list18 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.attachments = new ArrayList<Attach>(_list18.size);
          for (int _i19 = 0; _i19 < _list18.size; ++_i19)
          {
            Attach _elem20; // required
            _elem20 = new Attach();
            _elem20.read(iprot);
            struct.attachments.add(_elem20);
          }
        }
        struct.setAttachmentsIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.shorturl = new ArrayList<ShortURL>(_list21.size);
          for (int _i22 = 0; _i22 < _list21.size; ++_i22)
          {
            ShortURL _elem23; // required
            _elem23 = new ShortURL();
            _elem23.read(iprot);
            struct.shorturl.add(_elem23);
          }
        }
        struct.setShorturlIsSet(true);
      }
    }
  }

}

