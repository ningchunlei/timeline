/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.iko.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class EngineException extends Exception implements org.apache.thrift.TBase<EngineException, EngineException._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EngineException");

  private static final org.apache.thrift.protocol.TField ERRORNO_FIELD_DESC = new org.apache.thrift.protocol.TField("errorno", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ERRMSG_FIELD_DESC = new org.apache.thrift.protocol.TField("errmsg", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new EngineExceptionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new EngineExceptionTupleSchemeFactory());
  }

  public int errorno; // required
  public String errmsg; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ERRORNO((short)1, "errorno"),
    ERRMSG((short)2, "errmsg");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ERRORNO
          return ERRORNO;
        case 2: // ERRMSG
          return ERRMSG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ERRORNO_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ERRORNO, new org.apache.thrift.meta_data.FieldMetaData("errorno", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ERRMSG, new org.apache.thrift.meta_data.FieldMetaData("errmsg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EngineException.class, metaDataMap);
  }

  public EngineException() {
  }

  public EngineException(
    int errorno,
    String errmsg)
  {
    this();
    this.errorno = errorno;
    setErrornoIsSet(true);
    this.errmsg = errmsg;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public EngineException(EngineException other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.errorno = other.errorno;
    if (other.isSetErrmsg()) {
      this.errmsg = other.errmsg;
    }
  }

  public EngineException deepCopy() {
    return new EngineException(this);
  }

  @Override
  public void clear() {
    setErrornoIsSet(false);
    this.errorno = 0;
    this.errmsg = null;
  }

  public int getErrorno() {
    return this.errorno;
  }

  public EngineException setErrorno(int errorno) {
    this.errorno = errorno;
    setErrornoIsSet(true);
    return this;
  }

  public void unsetErrorno() {
    __isset_bit_vector.clear(__ERRORNO_ISSET_ID);
  }

  /** Returns true if field errorno is set (has been assigned a value) and false otherwise */
  public boolean isSetErrorno() {
    return __isset_bit_vector.get(__ERRORNO_ISSET_ID);
  }

  public void setErrornoIsSet(boolean value) {
    __isset_bit_vector.set(__ERRORNO_ISSET_ID, value);
  }

  public String getErrmsg() {
    return this.errmsg;
  }

  public EngineException setErrmsg(String errmsg) {
    this.errmsg = errmsg;
    return this;
  }

  public void unsetErrmsg() {
    this.errmsg = null;
  }

  /** Returns true if field errmsg is set (has been assigned a value) and false otherwise */
  public boolean isSetErrmsg() {
    return this.errmsg != null;
  }

  public void setErrmsgIsSet(boolean value) {
    if (!value) {
      this.errmsg = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ERRORNO:
      if (value == null) {
        unsetErrorno();
      } else {
        setErrorno((Integer)value);
      }
      break;

    case ERRMSG:
      if (value == null) {
        unsetErrmsg();
      } else {
        setErrmsg((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ERRORNO:
      return Integer.valueOf(getErrorno());

    case ERRMSG:
      return getErrmsg();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ERRORNO:
      return isSetErrorno();
    case ERRMSG:
      return isSetErrmsg();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof EngineException)
      return this.equals((EngineException)that);
    return false;
  }

  public boolean equals(EngineException that) {
    if (that == null)
      return false;

    boolean this_present_errorno = true;
    boolean that_present_errorno = true;
    if (this_present_errorno || that_present_errorno) {
      if (!(this_present_errorno && that_present_errorno))
        return false;
      if (this.errorno != that.errorno)
        return false;
    }

    boolean this_present_errmsg = true && this.isSetErrmsg();
    boolean that_present_errmsg = true && that.isSetErrmsg();
    if (this_present_errmsg || that_present_errmsg) {
      if (!(this_present_errmsg && that_present_errmsg))
        return false;
      if (!this.errmsg.equals(that.errmsg))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(EngineException other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    EngineException typedOther = (EngineException)other;

    lastComparison = Boolean.valueOf(isSetErrorno()).compareTo(typedOther.isSetErrorno());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrorno()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorno, typedOther.errorno);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetErrmsg()).compareTo(typedOther.isSetErrmsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrmsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errmsg, typedOther.errmsg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("EngineException(");
    boolean first = true;

    sb.append("errorno:");
    sb.append(this.errorno);
    first = false;
    if (!first) sb.append(", ");
    sb.append("errmsg:");
    if (this.errmsg == null) {
      sb.append("null");
    } else {
      sb.append(this.errmsg);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class EngineExceptionStandardSchemeFactory implements SchemeFactory {
    public EngineExceptionStandardScheme getScheme() {
      return new EngineExceptionStandardScheme();
    }
  }

  private static class EngineExceptionStandardScheme extends StandardScheme<EngineException> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, EngineException struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ERRORNO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.errorno = iprot.readI32();
              struct.setErrornoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ERRMSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.errmsg = iprot.readString();
              struct.setErrmsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, EngineException struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ERRORNO_FIELD_DESC);
      oprot.writeI32(struct.errorno);
      oprot.writeFieldEnd();
      if (struct.errmsg != null) {
        oprot.writeFieldBegin(ERRMSG_FIELD_DESC);
        oprot.writeString(struct.errmsg);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class EngineExceptionTupleSchemeFactory implements SchemeFactory {
    public EngineExceptionTupleScheme getScheme() {
      return new EngineExceptionTupleScheme();
    }
  }

  private static class EngineExceptionTupleScheme extends TupleScheme<EngineException> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, EngineException struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetErrorno()) {
        optionals.set(0);
      }
      if (struct.isSetErrmsg()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetErrorno()) {
        oprot.writeI32(struct.errorno);
      }
      if (struct.isSetErrmsg()) {
        oprot.writeString(struct.errmsg);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, EngineException struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.errorno = iprot.readI32();
        struct.setErrornoIsSet(true);
      }
      if (incoming.get(1)) {
        struct.errmsg = iprot.readString();
        struct.setErrmsgIsSet(true);
      }
    }
  }

}

