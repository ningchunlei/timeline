//
// Autogenerated by Thrift Compiler (0.8.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var ShareStruct_ttypes = require('./ShareStruct_types')
var Exception_ttypes = require('./Exception_types')


var ttypes = require('./timeline_types');
//HELPER FUNCTIONS AND STRUCTURES

var TimeLineIFace_get_args = function(args) {
  this.uid = null;
  this.g = null;
  this.start = null;
  this.len = null;
  if (args) {
    if (args.uid !== undefined) {
      this.uid = args.uid;
    }
    if (args.g !== undefined) {
      this.g = args.g;
    }
    if (args.start !== undefined) {
      this.start = args.start;
    }
    if (args.len !== undefined) {
      this.len = args.len;
    }
  }
};
TimeLineIFace_get_args.prototype = {};
TimeLineIFace_get_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.g = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.start = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.len = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimeLineIFace_get_args.prototype.write = function(output) {
  output.writeStructBegin('TimeLineIFace_get_args');
  if (this.uid) {
    output.writeFieldBegin('uid', Thrift.Type.STRING, 1);
    output.writeString(this.uid);
    output.writeFieldEnd();
  }
  if (this.g) {
    output.writeFieldBegin('g', Thrift.Type.I32, 2);
    output.writeI32(this.g);
    output.writeFieldEnd();
  }
  if (this.start) {
    output.writeFieldBegin('start', Thrift.Type.I32, 3);
    output.writeI32(this.start);
    output.writeFieldEnd();
  }
  if (this.len) {
    output.writeFieldBegin('len', Thrift.Type.I32, 4);
    output.writeI32(this.len);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TimeLineIFace_get_result = function(args) {
  this.success = null;
  this.error = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
TimeLineIFace_get_result.prototype = {};
TimeLineIFace_get_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ShareStruct_ttypes.TimeLine();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new Exception_ttypes.EngineException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimeLineIFace_get_result.prototype.write = function(output) {
  output.writeStructBegin('TimeLineIFace_get_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.error) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TimeLineIFace_add_args = function(args) {
  this.uid = null;
  this.g = null;
  this.mid = null;
  if (args) {
    if (args.uid !== undefined) {
      this.uid = args.uid;
    }
    if (args.g !== undefined) {
      this.g = args.g;
    }
    if (args.mid !== undefined) {
      this.mid = args.mid;
    }
  }
};
TimeLineIFace_add_args.prototype = {};
TimeLineIFace_add_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.g = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readI32();
          this.g.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimeLineIFace_add_args.prototype.write = function(output) {
  output.writeStructBegin('TimeLineIFace_add_args');
  if (this.uid) {
    output.writeFieldBegin('uid', Thrift.Type.STRING, 1);
    output.writeString(this.uid);
    output.writeFieldEnd();
  }
  if (this.g) {
    output.writeFieldBegin('g', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.g.length);
    for (var iter7 in this.g)
    {
      if (this.g.hasOwnProperty(iter7))
      {
        iter7 = this.g[iter7];
        output.writeI32(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.mid) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 3);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TimeLineIFace_add_result = function(args) {
  this.success = null;
  this.error = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
TimeLineIFace_add_result.prototype = {};
TimeLineIFace_add_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new Exception_ttypes.EngineException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimeLineIFace_add_result.prototype.write = function(output) {
  output.writeStructBegin('TimeLineIFace_add_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.error) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TimeLineIFace_remove_args = function(args) {
  this.uid = null;
  this.mid = null;
  this.g = null;
  if (args) {
    if (args.uid !== undefined) {
      this.uid = args.uid;
    }
    if (args.mid !== undefined) {
      this.mid = args.mid;
    }
    if (args.g !== undefined) {
      this.g = args.g;
    }
  }
};
TimeLineIFace_remove_args.prototype = {};
TimeLineIFace_remove_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.g = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimeLineIFace_remove_args.prototype.write = function(output) {
  output.writeStructBegin('TimeLineIFace_remove_args');
  if (this.uid) {
    output.writeFieldBegin('uid', Thrift.Type.STRING, 1);
    output.writeString(this.uid);
    output.writeFieldEnd();
  }
  if (this.mid) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 2);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.g) {
    output.writeFieldBegin('g', Thrift.Type.I32, 3);
    output.writeI32(this.g);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TimeLineIFace_remove_result = function(args) {
  this.success = null;
  this.error = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
TimeLineIFace_remove_result.prototype = {};
TimeLineIFace_remove_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new Exception_ttypes.EngineException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimeLineIFace_remove_result.prototype.write = function(output) {
  output.writeStructBegin('TimeLineIFace_remove_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.error) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TimeLineIFaceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {};
};
TimeLineIFaceClient.prototype = {};
TimeLineIFaceClient.prototype.get = function(uid, g, start, len, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_get(uid, g, start, len);
};

TimeLineIFaceClient.prototype.send_get = function(uid, g, start, len) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get', Thrift.MessageType.CALL, this.seqid);
  var args = new TimeLineIFace_get_args();
  args.uid = uid;
  args.g = g;
  args.start = start;
  args.len = len;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TimeLineIFaceClient.prototype.recv_get = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TimeLineIFace_get_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get failed: unknown result');
};
TimeLineIFaceClient.prototype.add = function(uid, g, mid, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_add(uid, g, mid);
};

TimeLineIFaceClient.prototype.send_add = function(uid, g, mid) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('add', Thrift.MessageType.CALL, this.seqid);
  var args = new TimeLineIFace_add_args();
  args.uid = uid;
  args.g = g;
  args.mid = mid;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TimeLineIFaceClient.prototype.recv_add = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TimeLineIFace_add_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('add failed: unknown result');
};
TimeLineIFaceClient.prototype.remove = function(uid, mid, g, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_remove(uid, mid, g);
};

TimeLineIFaceClient.prototype.send_remove = function(uid, mid, g) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('remove', Thrift.MessageType.CALL, this.seqid);
  var args = new TimeLineIFace_remove_args();
  args.uid = uid;
  args.mid = mid;
  args.g = g;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TimeLineIFaceClient.prototype.recv_remove = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TimeLineIFace_remove_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('remove failed: unknown result');
};
var TimeLineIFaceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
TimeLineIFaceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

TimeLineIFaceProcessor.prototype.process_get = function(seqid, input, output) {
  var args = new TimeLineIFace_get_args();
  args.read(input);
  input.readMessageEnd();
  var result = new TimeLineIFace_get_result();
  this._handler.get(args.uid, args.g, args.start, args.len, function (success) {
    result.success = success;
    output.writeMessageBegin("get", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

TimeLineIFaceProcessor.prototype.process_add = function(seqid, input, output) {
  var args = new TimeLineIFace_add_args();
  args.read(input);
  input.readMessageEnd();
  var result = new TimeLineIFace_add_result();
  this._handler.add(args.uid, args.g, args.mid, function (success) {
    result.success = success;
    output.writeMessageBegin("add", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

TimeLineIFaceProcessor.prototype.process_remove = function(seqid, input, output) {
  var args = new TimeLineIFace_remove_args();
  args.read(input);
  input.readMessageEnd();
  var result = new TimeLineIFace_remove_result();
  this._handler.remove(args.uid, args.mid, args.g, function (success) {
    result.success = success;
    output.writeMessageBegin("remove", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

