//
// Autogenerated by Thrift Compiler (0.8.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var ttypes = module.exports = {};
var EngineException = module.exports.EngineException = function(args) {
  Thrift.TException.call(this, "EngineException")
  this.name = "EngineException"
  this.errorno = null;
  this.errmsg = null;
  if (args) {
    if (args.errorno !== undefined) {
      this.errorno = args.errorno;
    }
    if (args.errmsg !== undefined) {
      this.errmsg = args.errmsg;
    }
  }
};
Thrift.inherits(EngineException, Thrift.TException);
EngineException.prototype.name = 'EngineException';
EngineException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.errorno = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.errmsg = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EngineException.prototype.write = function(output) {
  output.writeStructBegin('EngineException');
  if (this.errorno) {
    output.writeFieldBegin('errorno', Thrift.Type.I32, 1);
    output.writeI32(this.errorno);
    output.writeFieldEnd();
  }
  if (this.errmsg) {
    output.writeFieldBegin('errmsg', Thrift.Type.STRING, 2);
    output.writeString(this.errmsg);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

