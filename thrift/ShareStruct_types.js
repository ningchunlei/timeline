//
// Autogenerated by Thrift Compiler (0.8.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var ttypes = module.exports = {};
ttypes.TimeLineType = {
'Inbox' : 1,
'Outbox' : 2,
'At' : 3,
'Repost' : 4,
'Comment' : 5,
'Favorite' : 6
};
ttypes.MsgType = {
'Repost' : 4,
'Comment' : 5,
'Post' : 7
};
ttypes.RelationType = {
'Followers' : 8,
'Following' : 9
};
ttypes.MsgTag = {
'All' : 10
};
ttypes.AttachType = {
'Normal' : 0,
'Photo' : 1,
'Video' : 2,
'Music' : 3,
'SinaPhoto' : 4
};
var Attach = module.exports.Attach = function(args) {
  this.attachtext = null;
  this.type = null;
  this.attachname = null;
  if (args) {
    if (args.attachtext !== undefined) {
      this.attachtext = args.attachtext;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.attachname !== undefined) {
      this.attachname = args.attachname;
    }
  }
};
Attach.prototype = {};
Attach.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.attachtext = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.attachname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Attach.prototype.write = function(output) {
  output.writeStructBegin('Attach');
  if (this.attachtext) {
    output.writeFieldBegin('attachtext', Thrift.Type.STRING, 1);
    output.writeString(this.attachtext);
    output.writeFieldEnd();
  }
  if (this.type) {
    output.writeFieldBegin('type', Thrift.Type.I32, 2);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.attachname) {
    output.writeFieldBegin('attachname', Thrift.Type.STRING, 3);
    output.writeString(this.attachname);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ShortURL = module.exports.ShortURL = function(args) {
  this.url = null;
  this.tiny_url = null;
  this.info = null;
  this.actual_url = null;
  if (args) {
    if (args.url !== undefined) {
      this.url = args.url;
    }
    if (args.tiny_url !== undefined) {
      this.tiny_url = args.tiny_url;
    }
    if (args.info !== undefined) {
      this.info = args.info;
    }
    if (args.actual_url !== undefined) {
      this.actual_url = args.actual_url;
    }
  }
};
ShortURL.prototype = {};
ShortURL.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tiny_url = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.info = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.actual_url = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ShortURL.prototype.write = function(output) {
  output.writeStructBegin('ShortURL');
  if (this.url) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 1);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  if (this.tiny_url) {
    output.writeFieldBegin('tiny_url', Thrift.Type.STRING, 2);
    output.writeString(this.tiny_url);
    output.writeFieldEnd();
  }
  if (this.info) {
    output.writeFieldBegin('info', Thrift.Type.STRING, 3);
    output.writeString(this.info);
    output.writeFieldEnd();
  }
  if (this.actual_url) {
    output.writeFieldBegin('actual_url', Thrift.Type.STRING, 4);
    output.writeString(this.actual_url);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Msg = module.exports.Msg = function(args) {
  this.mid = null;
  this.msgtext = null;
  this.uid = null;
  this.pushlishTime = null;
  this.type = null;
  this.tag = null;
  this.ip = null;
  this.device = null;
  this.atIds = null;
  this.attachments = null;
  this.shorturl = null;
  if (args) {
    if (args.mid !== undefined) {
      this.mid = args.mid;
    }
    if (args.msgtext !== undefined) {
      this.msgtext = args.msgtext;
    }
    if (args.uid !== undefined) {
      this.uid = args.uid;
    }
    if (args.pushlishTime !== undefined) {
      this.pushlishTime = args.pushlishTime;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.tag !== undefined) {
      this.tag = args.tag;
    }
    if (args.ip !== undefined) {
      this.ip = args.ip;
    }
    if (args.device !== undefined) {
      this.device = args.device;
    }
    if (args.atIds !== undefined) {
      this.atIds = args.atIds;
    }
    if (args.attachments !== undefined) {
      this.attachments = args.attachments;
    }
    if (args.shorturl !== undefined) {
      this.shorturl = args.shorturl;
    }
  }
};
Msg.prototype = {};
Msg.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.msgtext = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.pushlishTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.tag = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.ip = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.device = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.atIds = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString();
          this.atIds.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.attachments = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = new ttypes.Attach();
          elem13.read(input);
          this.attachments.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.LIST) {
        var _size14 = 0;
        var _rtmp318;
        this.shorturl = [];
        var _etype17 = 0;
        _rtmp318 = input.readListBegin();
        _etype17 = _rtmp318.etype;
        _size14 = _rtmp318.size;
        for (var _i19 = 0; _i19 < _size14; ++_i19)
        {
          var elem20 = null;
          elem20 = new ttypes.ShortURL();
          elem20.read(input);
          this.shorturl.push(elem20);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Msg.prototype.write = function(output) {
  output.writeStructBegin('Msg');
  if (this.mid) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 1);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.msgtext) {
    output.writeFieldBegin('msgtext', Thrift.Type.STRING, 2);
    output.writeString(this.msgtext);
    output.writeFieldEnd();
  }
  if (this.uid) {
    output.writeFieldBegin('uid', Thrift.Type.STRING, 3);
    output.writeString(this.uid);
    output.writeFieldEnd();
  }
  if (this.pushlishTime) {
    output.writeFieldBegin('pushlishTime', Thrift.Type.STRING, 5);
    output.writeString(this.pushlishTime);
    output.writeFieldEnd();
  }
  if (this.type) {
    output.writeFieldBegin('type', Thrift.Type.I32, 6);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.tag) {
    output.writeFieldBegin('tag', Thrift.Type.I32, 7);
    output.writeI32(this.tag);
    output.writeFieldEnd();
  }
  if (this.ip) {
    output.writeFieldBegin('ip', Thrift.Type.STRING, 8);
    output.writeString(this.ip);
    output.writeFieldEnd();
  }
  if (this.device) {
    output.writeFieldBegin('device', Thrift.Type.STRING, 9);
    output.writeString(this.device);
    output.writeFieldEnd();
  }
  if (this.atIds) {
    output.writeFieldBegin('atIds', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.STRING, this.atIds.length);
    for (var iter21 in this.atIds)
    {
      if (this.atIds.hasOwnProperty(iter21))
      {
        iter21 = this.atIds[iter21];
        output.writeString(iter21);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.attachments) {
    output.writeFieldBegin('attachments', Thrift.Type.LIST, 11);
    output.writeListBegin(Thrift.Type.STRUCT, this.attachments.length);
    for (var iter22 in this.attachments)
    {
      if (this.attachments.hasOwnProperty(iter22))
      {
        iter22 = this.attachments[iter22];
        iter22.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.shorturl) {
    output.writeFieldBegin('shorturl', Thrift.Type.LIST, 12);
    output.writeListBegin(Thrift.Type.STRUCT, this.shorturl.length);
    for (var iter23 in this.shorturl)
    {
      if (this.shorturl.hasOwnProperty(iter23))
      {
        iter23 = this.shorturl[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TimeLine = module.exports.TimeLine = function(args) {
  this.uid = null;
  this.group = null;
  this.mids = null;
  if (args) {
    if (args.uid !== undefined) {
      this.uid = args.uid;
    }
    if (args.group !== undefined) {
      this.group = args.group;
    }
    if (args.mids !== undefined) {
      this.mids = args.mids;
    }
  }
};
TimeLine.prototype = {};
TimeLine.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.group = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.mids = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = input.readString();
          this.mids.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimeLine.prototype.write = function(output) {
  output.writeStructBegin('TimeLine');
  if (this.uid) {
    output.writeFieldBegin('uid', Thrift.Type.STRING, 1);
    output.writeString(this.uid);
    output.writeFieldEnd();
  }
  if (this.group) {
    output.writeFieldBegin('group', Thrift.Type.I32, 2);
    output.writeI32(this.group);
    output.writeFieldEnd();
  }
  if (this.mids) {
    output.writeFieldBegin('mids', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.mids.length);
    for (var iter31 in this.mids)
    {
      if (this.mids.hasOwnProperty(iter31))
      {
        iter31 = this.mids[iter31];
        output.writeString(iter31);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

